a <- c("9","5")
b <- c("12","34")
b2 <- c("78", "96")
c <- data.frame(rbind(a,b, b2))
head(c,3)
x <- c("9","12", "78")
b9c <- data.frame(c[ grep("9", x, invert = TRUE), 1:2])
head(b9c,3)
x <- c("9","12", "99")
b9c <- data.frame(c[ grep("9", x, invert = TRUE), 1:2])
head(b9c,3)
theVector <- data.frame(b9a[ grep("ot", b9b, invert = TRUE), 1:1])
theVector <- b9a[,"DRUG_CODE"]
head(theVector,2)
b9b <- data.frame(b9a[ grep("ot", theVector, invert = TRUE), 1:1])
b9b <- data.frame(b9a[ grep("ot", theVector, invert = TRUE), ])
SelectRows <- defmacro(
data=, target=, instr=,
expr={
#if the instr is not specified let it be TRUE
if(invalid(instr)){
SelectRows_tmp1 <- TRUE
} else{
SelectRows_tmp1 <- instr
}
#save the target col values into a vector
SelectRows_tmp2 <- b9a[,"DRUG_CODE"]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep("ot", SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
}
)
SelectRows <- defmacro(
data=, target=, theStr=, instr=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr)){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- instr
}
#save the target col values into a vector
SelectRows_tmp2 <- b9a[,"DRUG_CODE"]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
}
)
SelectRows <- defmacro(
data=, target=, theStr=, instr=, View=
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr)){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- instr
}
#save the target col values into a vector
SelectRows_tmp2 <- b9a[,"DRUG_CODE"]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)}
}
}
)
SelectRows(data=b9a, target=b9b, theStr="ot", View=1)
SelectRows <- defmacro(
data=, target=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr)){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- instr
}
#save the target col values into a vector
SelectRows_tmp2 <- b9a[,"DRUG_CODE"]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theStr="ot", View=1)
SelectRows(data=b9a, target=b9b, theStr="ot", view=1)
SelectRows(data=b9a, target=b9b, theStr="ot", instr=TRUE, view=1)
SelectRows <- defmacro(
data=, target=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr)){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- -instr
}
#save the target col values into a vector
SelectRows_tmp2 <- b9a[,"DRUG_CODE"]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theStr="ot", instr=TRUE, view=1)
SelectRows <- defmacro(
data=, target=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr) | instr != FALSE){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- TRUE
}
#save the target col values into a vector
SelectRows_tmp2 <- b9a[,"DRUG_CODE"]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theStr="ot", instr=TRUE, view=1)
SelectRows(data=b9a, target=b9b, theStr="ot", instr=FALSE, view=1)
SelectRows(data=b9a, target=b9b, theStr="ot", instr=0, view=1)
SelectRows(data=b9a, target=b9b, theStr="ot", instr=1, view=1)
SelectRows <- defmacro(
data=, target=, theCol=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr) | instr != FALSE){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- TRUE
}
#save the target col values into a vector
#if theCOl=DRUG_CODE, toString(theCol)=toString(DRUG_CODE)="DRUG_CODE"
SelectRows_tmp2 <- b9a[,toString(theCOl)]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theCol = DRUG_CODE, theStr="ot", instr=1, view=1)
theCol <- DRUG_CODE
toString(theCOl)
theCol <- 1
toString(theCOl)
theCol <- 1
toString(theCol)
SelectRows <- defmacro(
data=, target=, theCol=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr) | instr != FALSE){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- TRUE
}
#save the target col values into a vector
#if theCOl=DRUG_CODE, toString(theCol)=toString(DRUG_CODE)="DRUG_CODE"
SelectRows_tmp2 <- b9a[,toString(theCOl)]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theCol = DRUG_CODE, theStr="ot", instr=1, view=1)
SelectRows(data=b9a, target=b9b, theCol = "DRUG_CODE", theStr="ot", instr=1, view=1)
SelectRows <- defmacro(
data=, target=, theCol=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr) | instr != FALSE){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- TRUE
}
#save the target col values into a vector
#if theCOl=DRUG_CODE, toString(theCol)=toString(DRUG_CODE)="DRUG_CODE"
SelectRows_tmp2 <- b9a[,toString(theCo1)]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theCol = DRUG_CODE, theStr="ot", instr=1, view=1)
SelectRows <- defmacro(
data=, target=, theCol=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr) | instr != FALSE){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- TRUE
}
#save the target col values into a vector
#if theCOl=DRUG_CODE, toString(theCol)=toString(DRUG_CODE)="DRUG_CODE"
SelectRows_tmp2 <- b9a[,toString(theCol)]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theCol = DRUG_CODE, theStr="ot", instr=1, view=1)
SelectRows <- defmacro(
data=, target=, theCol=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr) | instr != FALSE){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- TRUE
}
#save the target col values into a vector
#if theCOl=DRUG_CODE, toString(theCol)=toString(DRUG_CODE)="DRUG_CODE"
SelectRows_tmp2 <- b9a[,toString(quote(theCol)]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theCol = DRUG_CODE, theStr="ot", instr=1, view=1)
SelectRows <- defmacro(
data=, target=, theCol=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr) | instr != FALSE){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- TRUE
}
#save the target col values into a vector
#if theCOl=DRUG_CODE, toString(theCol)=toString(DRUG_CODE)="DRUG_CODE"
SelectRows_tmp2 <- b9a[,toString(quote(theCol))]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theCol = DRUG_CODE, theStr="ot", instr=1, view=1)
SelectRows <- defmacro(
data=, target=, theCol=, theStr=, instr=, view=,
expr={
#if the instr is not specified let it be FALSE
#it is a bit twisting here, FALSE means invert=FALSE, i.e., select the rows containing values in theStr
if(invalid(instr) | instr != FALSE){
SelectRows_tmp1 <- FALSE
} else{
SelectRows_tmp1 <- TRUE
}
#save the target col values into a vector
#if theCOl=DRUG_CODE, toString(theCol)=toString(DRUG_CODE)="DRUG_CODE"
SelectRows_tmp2 <- b9a[,toString(quote(theCol))]
#theVector (selectRows_tmp2) contains all values in the selected column, it also follows the same row order as that in the source table
#from the source data, the system is goint to compare values in each column with the values in theVector
#so as to determine the column which entierly matches theVector
#Next, in theVector, rows matching the substr (e.g., theStr) will be marked by function grep()
#The option invert= means that the marked rows will not be selected
#accordingly, from the source data table, rows are selected, if the row number matches a selected row number in theVector
#finally the selected rows from the source data will be saved into the target data as data.frame
target <- data.frame(data[ grep(theStr, SelectRows_tmp2, invert = SelectRows_tmp1), ])
#rm(SelectRows_tmp1, SelectRows_tmp2)
#if view is not null, view the target table
if (!invalid(view)){
View(target)
}
})
SelectRows(data=b9a, target=b9b, theCol = DRUG_CODE, theStr="ot", instr=1, view=1)
SelectRows_tmp2
SelectRows(data=b9a, target=b9b, theCol = FREQ, theStr="ot", instr=1, view=1)
SelectRows(data=b9a, target=b9b, theCol = DRUG_CODE, theStr="ot", instr=0, view=1)
SelectRows(data=b9a, target=b9b, theCol = DRUG_CoDE, theStr="ot", instr=0, view=1)
thers <- readRDS("//LAPTOP-RMQQPS3G/Dropbox/Project/Canada DPD/Allfile/thers.rds")
drugs <- readRDS("//LAPTOP-RMQQPS3G/Dropbox/Project/Canada DPD/Allfile/drugs.rds")
statuss <- readRDS("//LAPTOP-RMQQPS3G/Dropbox/Project/Canada DPD/Allfile/statuss.rds")
inactives <- readRDS("//LAPTOP-RMQQPS3G/Dropbox/Project/Canada DPD/Allfile/inactives.rds")
b9 <- as.numeric(b9b$DRUG_CODE)
b9 <- data.farme(as.numeric(b9b$DRUG_CODE))
b9 <- data.frame(as.numeric(b9b$DRUG_CODE))
View(b9)
x < b9b
x <- b9b
as.numberic(x$DRUG_CODE) <- x
x[, c("DRUG_CODE")] <- sapply(x[, c("DRUG_CODE")], as.numeric)
View(x)
getfreq(data = b7a, col = DRUG_IDENTIFICATION_NUMBER, target=b8, view=1)
b9b[, c("DRUG_CODE")] <- sapply(b9b[, c("DRUG_CODE")], as.numeric)
View(b9b)
SelectRows(data=b9a, target=b9, theCol = DRUG_CODE, theStr="ot", instr=0, view=1)
#change DRUG_CODE back to numeric type
b9[, c("DRUG_CODE")] <- sapply(b9[, c("DRUG_CODE")], as.numeric)
SelectRows(data=b9a, target=b9, theCol = DRUG_CODE, theStr="ot", instr=0, view=)
#change DRUG_CODE back to numeric type
b9[, c("DRUG_CODE")] <- sapply(b9[, c("DRUG_CODE")], as.numeric)
b10a <- merge(statuss, b9, by=c("DRUG_CODE"))
View(b10a)
b10a <- merge(statuss, b9, by.x=c("DRUG_CODE"), by.y=c("DRUG_CODE"))
b10a <- data.frame(merge(statuss, b9, by.x=c("DRUG_CODE"), by.y=c("DRUG_CODE")))
b10a <- data.frame(subset(merge(statuss, b9, by.x=c("DRUG_CODE"), by.y=c("DRUG_CODE")), select=-c("FREQ")))
b10a <- subset(
merge(statuss, b9, by.x=c("DRUG_CODE"), by.y=c("DRUG_CODE"))
)
b10a <- subset(
merge(statuss, b9, by.x=c("DRUG_CODE"), by.y=c("DRUG_CODE")),
select=-c("FREQ")
)
b10a <- merge(statuss, b9, by.x=c("DRUG_CODE"), by.y=c("DRUG_CODE"))
b10 <- b10a[, !"DRUG_CODE", with=FALSE]
b10 <- b10a[, !"DRUG_CODE"]
b10 <- data.talbe(b10a[, !"DRUG_CODE"])
b10 <- within(b9, rm("FREQ"))
View(b10)
b10a <- merge(statuss, b9, by.x=c("DRUG_CODE"), by.y=c("DRUG_CODE"))
b10 <- within(b10a, rm("FREQ"))
View(b10)
View(b10)
c1 <- thers[substring(substring(thers$TC_ATC_NUMBER,1,4) == "N03A" )]
c1 <- thers[(substring(thers$TC_ATC_NUMBER,1,4) == "N03A" )]
c1 <- thers[(substring(thers$TC_ATC_NUMBER,1,4) == "N03A" ),]
View(c1)
c1 <- data.frame(thers[(substring(thers$TC_ATC_NUMBER,1,4) == "N03A" ), c("TC_ATC_NUMBER")])
c2 <- merge(drugs, c1, by c("DRUG_CODE"))
View(c1)
c1 <- data.frame(thers[(substring(thers$TC_ATC_NUMBER,1,4) == "N03A" ), c("DRUG_CODE", "TC_ATC_NUMBER")])
c2 <- merge(drugs, c1, by= c("DRUG_CODE"))
View(c2)
c <- distinct(data=c2, target=c, strcols="DRUG_CODE, TC_ATC_NUMBER ", noblank=1, view=1)
c <- distinct(data="c2", target="c", strcols="DRUG_CODE, TC_ATC_NUMBER ", noblank=1, view=1)
c2 <- merge(drugs, c1, by= c("DRUG_CODE"))
View(c2)
c <- distinct(data=c2, target=c, strcols="DRUG_CODE, DRUG_IDENTIFICATION_CODE ", noblank=1, view=1)
distinct(data=c2, target=c, strcols="DRUG_CODE, DRUG_IDENTIFICATION_CODE ", noblank=1, view=1)
distinct(data=c2, target=c, strcols="DRUG_IDENTIFICATION_NUMBER, TC_ATC_NUMBER ", noblank=1, view=1)
rmall()
rmall()
#remove all objects from the memory
#example:
rm(list=ls())
name_thezip <- "F:\Personal\Dropbox\Project\Canada DPD\SASProject\Data\allfiles.zip"
name_thezip <- "F:/Personal/Dropbox/Project/Canada DPD/SASProject/Data/allfiles.zip"
name_thetxt <- "drug.txt"
#https://stackoverflow.com/questions/12460938/r-reading-in-a-zip-data-file-without-unzipping-it
data <- read.table(unz(name_thezip, name_thetxt), nrows=10, header=F, quote="\"", sep=",")
view(data)
head(data)
#make a unique list of drug_code
unique_drug_codes <- unique(data['DRUG_CODE'])
#make a unique list of drug_code
unique_drug_codes <- unique(data['V1'])
.sort()
unique_drug_codes <- sort(unique_drug_codes)
head(unique_drug_codes)
unique_drug_codes <- sort(unique_drug_codes['v1'])
sort(unique_drug_codes)
cls
cl
cs
head(unique_drug_codes)
data <- data[order($V1)]
head(data)
data <- data[order(data$V1)]
head(data)
name_thezip <- "https://www.canada.ca/content/dam/hc-sc/documents/services/drug-product-database/allfiles.zip"
name_thetxt <- "drug.txt"
#https://stackoverflow.com/questions/12460938/r-reading-in-a-zip-data-file-without-unzipping-it
data <- read.table(unz(name_thezip, name_thetxt), nrows=10, header=F, quote="\"", sep=",")
tmpzip <- tempfile()
download.file(name_thezip, tmpzip)
data <- read.table(unz(tmpzip, name_thetxt), nrows=10, header=F, quote="\"", sep=",")
data <- data[order(data$V1)]
head(data)
tmpzip <- tempfile()
download.file(name_thezip, tmpzip)
data <- read.table(unz(tmpzip, name_thetxt),  header=F, quote="\"", sep=",")
#https://stackoverflow.com/questions/12460938/r-reading-in-a-zip-data-file-without-unzipping-it
#data <- read.table(unz(name_thezip, name_thetxt), nrows=10, header=F, quote="\"", sep=",")
#order by v1
data <- data[order(data$V1)]
head(data)
name_thezip <- "https://www.canada.ca/content/dam/hc-sc/documents/services/drug-product-database/allfiles.zip"
name_thetxt <- "form.txt"
#https://rpubs.com/otienodominic/398952
#create a tmp file
tmpzip <- tempfile()
download.file(name_thezip, tmpzip)
data <- read.table(unz(tmpzip, name_thetxt),  header=F, quote="\"", sep=",")
#https://stackoverflow.com/questions/12460938/r-reading-in-a-zip-data-file-without-unzipping-it
#data <- read.table(unz(name_thezip, name_thetxt), nrows=10, header=F, quote="\"", sep=",")
#order by v1
data <- data[order(data$V1)]
head(data)
varnames_drug <- c("DRUG_CODE", "FORM_CODE", "PHARMACEUTICAL_FORM", "PHARMACEUTICAL_FORM_F")
setnames(data, new=varnames_drug)
library("dbplyr", lib.loc="~/R/win-library/3.6")
install.packages('dplyr')
install.packages('dplyr')
install.packages("dplyr")
install.packages('dbplyr')
library('dplyr')
setnames(data, new=varnames_drug)
colnames(data) <- varnames_drug
head(data)
